{"version":3,"sources":["components/Container.js","components/Input.js","components/Label.js","components/Title.js","components/ErrorMessage.js","App.js","index.js"],"names":["styled","div","input","p","h1","App","useState","binaryText","setBinaryText","decimalText","setDecimalText","errorMessage","setErrorMessage","isEmpty","value","clearInput","Container","Title","Label","Input","onChange","event","target","enterdValue","match","convertToDecimal","split","map","Number","reverse","reduce","accumulator","currentValue","index","Math","pow","parseInt","isNaN","remainders","floor","push","convertToBinary","toString","ErrorMessage","ReactDOM","render","document","getElementById"],"mappings":"6gBAEeA,UAAOC,IAAtB,K,qOCAeD,UAAOE,MAAtB,K,wICAeF,UAAOG,EAAtB,K,4FCAeH,UAAOI,GAAtB,K,wFCAeJ,UAAOG,EAAtB,KCmHeE,EA7GH,WAAO,IAAD,EACsBC,mBAAS,IAD/B,mBACPC,EADO,KACKC,EADL,OAEwBF,mBAAS,IAFjC,mBAEPG,EAFO,KAEMC,EAFN,OAG0BJ,mBAAS,IAHnC,mBAGPK,EAHO,KAGOC,EAHP,KAKRC,EAAU,SAACC,GAAD,MAAqB,KAAVA,GACrBC,EAAa,WACfP,EAAc,IACdE,EAAe,KA6EnB,OACI,kBAACM,EAAD,KACI,kBAACC,EAAD,0BACA,6BACI,kBAACC,EAAD,gBACA,kBAACC,EAAD,CACIL,MAAOP,EACPa,SAjFQ,SAAAC,GAGpB,GAAIR,EAAQQ,EAAMC,OAAOR,OACrBC,QADJ,CAKA,IAAMQ,EAAcF,EAAMC,OAAOR,MAGjC,GAAKS,EAAYC,MAAM,YAAvB,CAMAZ,EAAgB,IAGhB,IASMa,EATgBF,EACjBG,MAAM,IACNC,IAAIC,QACJC,UAMkCC,QAJvB,SAACC,EAAaC,EAAcC,GACxC,OAAOF,GAAgC,IAAjBC,EAAqBE,KAAKC,IAAI,EAAGF,GAAS,MAKpEzB,EAAce,GACdb,EAAee,QApBXb,EAAgB,sCAwEhB,6BACI,kBAACM,EAAD,iBACA,kBAACC,EAAD,CACIL,MAAOL,EACPW,SArDQ,SAACC,GAGrB,GAAIR,EAAQQ,EAAMC,OAAOR,OACrBC,QADJ,CAKA,IAAIQ,EAAca,SAASf,EAAMC,OAAOR,OAGxC,GAAIuB,MAAMd,GACNX,EAAgB,mCAOpB,GAHAF,EAAea,GAGK,IAAhBA,EAAJ,CAOA,IAFA,IAAMe,EAAa,GAEZJ,KAAKK,MAAMhB,GAAe,GAC7Be,EAAWE,KAAKjB,EAAc,GAC9BA,EAAcW,KAAKK,MAAMhB,EAAc,GAG3Ce,EAAWT,UAEX,IACMY,EAAkBH,EAAWR,QADnB,SAACC,EAAaC,GAAd,OAA+BD,EAAcC,EAAaU,cAG1ElC,EAAciC,QAhBVjC,EAAc,QAoCbG,GACG,kBAACgC,EAAD,eAAsBhC,K,MCzGtCiC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.254c1da4.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport default styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin: 36px auto;\r\n    padding: 36px 72px 72px;\r\n    max-width: 720px;\r\n    background: #ffffff;\r\n`;","import styled from 'styled-components';\r\n\r\nexport default styled.input`\r\n    border: 1px solid #dddddd;\r\n    padding: 8px;\r\n    min-width: 240px;\r\n\r\n    &:disabled {\r\n        background: #dddddd;\r\n        box-shodow: none;\r\n    }\r\n`;","import styled from 'styled-components';\r\n\r\nexport default styled.p`\r\n    font-size: 16px;\r\n    font-weight: 500;\r\n    margin: 8px 0;\r\n`;","import styled from 'styled-components';\r\n\r\nexport default styled.h1`\r\n    margin: 32px 0;\r\n`;","import styled from 'styled-components';\r\n\r\nexport default styled.p`\r\n    color: red;\r\n`;","import React, { useState } from 'react';\r\n\r\nimport Container from './components/Container';\r\nimport Input from './components/Input';\r\nimport Label from './components/Label';\r\nimport Title from './components/Title';\r\nimport ErrorMessage from './components/ErrorMessage';\r\n\r\nconst App = () => {\r\n    const [binaryText, setBinaryText] = useState('');\r\n    const [decimalText, setDecimalText] = useState('');\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n\r\n    const isEmpty = (value) => value === '' ? true : false;\r\n    const clearInput = () => {\r\n        setBinaryText('');\r\n        setDecimalText('');\r\n    };\r\n\r\n    const binaryToDecimal = event => {\r\n\r\n        // Check value is not empty\r\n        if (isEmpty(event.target.value)) {\r\n            clearInput();\r\n            return;\r\n        }\r\n\r\n        const enterdValue = event.target.value;\r\n\r\n        // Invalid value\r\n        if (!enterdValue.match(/^[0-1]+$/)) {\r\n            setErrorMessage('You can only enter \"0\" or \"1\"');\r\n            return;\r\n        }\r\n\r\n        // Valid value\r\n        setErrorMessage('');\r\n\r\n        // Reverse enterd value\r\n        const reversedValue = enterdValue\r\n            .split('')\r\n            .map(Number)\r\n            .reverse();\r\n\r\n        const reducer = (accumulator, currentValue, index) => {\r\n            return accumulator + (currentValue === 1 ? Math.pow(2, index) : 0);\r\n        }\r\n\r\n        const convertToDecimal = reversedValue.reduce(reducer);\r\n\r\n        setBinaryText(enterdValue);\r\n        setDecimalText(convertToDecimal);\r\n    };\r\n\r\n    const decimalToBinary = (event) => {\r\n\r\n        // Check value is not empty\r\n        if (isEmpty(event.target.value)) {\r\n            clearInput();\r\n            return;\r\n        }\r\n\r\n        let enterdValue = parseInt(event.target.value);\r\n\r\n        // Check value is Number\r\n        if (isNaN(enterdValue)) {\r\n            setErrorMessage('You can only enter Decimal');\r\n            return;\r\n        }\r\n\r\n        setDecimalText(enterdValue);\r\n\r\n        // If value is 0, binaray equals 0 too\r\n        if (enterdValue === 0) {\r\n            setBinaryText(0);\r\n            return;\r\n        }\r\n\r\n        const remainders = [];\r\n\r\n        while (Math.floor(enterdValue) > 0) {\r\n            remainders.push(enterdValue % 2);\r\n            enterdValue = Math.floor(enterdValue / 2);\r\n        }\r\n\r\n        remainders.reverse();\r\n\r\n        const reducer = (accumulator, currentValue) => accumulator + currentValue.toString();\r\n        const convertToBinary = remainders.reduce(reducer);\r\n\r\n        setBinaryText(convertToBinary);\r\n    };\r\n\r\n    return (\r\n        <Container>\r\n            <Title>Binary To Decimal</Title>\r\n            <div>\r\n                <Label>Binary:</Label>\r\n                <Input\r\n                    value={binaryText}\r\n                    onChange={binaryToDecimal}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Label>Decimal:</Label>\r\n                <Input\r\n                    value={decimalText}\r\n                    onChange={decimalToBinary}\r\n                />\r\n            </div>\r\n            {errorMessage && (\r\n                <ErrorMessage>Error: {errorMessage}</ErrorMessage>\r\n            )}\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}